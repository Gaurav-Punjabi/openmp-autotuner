//===-- HelloWorld.cpp - Example Transformations --------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
#include "llvm/Passes/PassBuilder.h"
#include "llvm/Passes/PassPlugin.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/IR/IRBuilder.h" // Include this header for IRBuilder
#include "llvm/IR/Verifier.h"
#include "llvm/Support/Error.h"
#include "llvm/Support/FileSystem.h"
#include "llvm/IR/Function.h" // Include for llvm::Function
#include "llvm/IR/GlobalVariable.h" // Include for GlobalVariable
#include "llvm/IR/Constants.h" // Include for Constant and ConstantDataArray
#include <cstdarg>
#include <sstream>

using namespace llvm;


bool endsWith(const llvm::StringRef &str, const llvm::StringRef &suffix) {
  if (str.size() < suffix.size()) {
    return false;
  }
  return str.find(suffix) != llvm::StringRef::npos;
}

int get_thread_count(const string& ir_file_name) {

    auto inference_start_time = chrono::high_resolution_clock::now();

    // Path to the Python script
    const char* pythonScriptPath = "/WAVE/projects2/ycho_lab/gpunjabi/autotuning/model/gnn/gnn_nb_threads/model_inference.py";

    // Command to execute the Python script with the file path as an argument
    char command[512];
    snprintf(command, sizeof(command), "python %s %s", pythonScriptPath, ir_file_name.c_str());

    // Open the process for reading the output
    FILE* fp = popen(command, "r");
    if (fp == NULL) {
        fprintf(stderr, "Failed to run Python script\n");
        return 1;
    }

    // Buffer to store the output from the Python script
    char buffer[128];
    int num_threads = -1;

    // Read the output of the Python script
    while (fgets(buffer, sizeof(buffer), fp) != NULL) {
        // Assuming the thread number is printed as the last output from the Python script
        sscanf(buffer, "%d", &num_threads);
    }

    // Close the process
    pclose(fp);

    auto inference_end_time = chrono::high_resolution_clock::now();
    chrono::duration<double, milli> elapsed = inference_end_time - inference_start_time;

    cout << "\nTime taken by inference : " << elapsed.count() << "ms";

    return num_threads != -1 ? num_threads : 1;
}

void writeModuleToFile(llvm::Module &M, const std::string &filePath) {
    // Create an output file stream
    llvm::ErrorOr<std::unique_ptr<llvm::raw_fd_ostream>> fileOrErr = llvm::make_unique<llvm::raw_fd_ostream>(filePath, llvm::sys::fs::F_None);
    if (std::error_code EC = fileOrErr.getError()) {
        llvm::errs() << "Error opening file: " << EC.message() << "\n";
        return;
    }
    
    auto &fileStream = *fileOrErr;

    // Write the IR to the file
    M.print(*fileStream, nullptr); // Print the module IR

    // Close the file
    fileStream->close();
}

struct OMPInterceptorPass : llvm::PassInfoMixin<OMPInterceptorPass> {
    llvm::PreservedAnalyses run(llvm::Function &F, llvm::FunctionAnalysisManager &) {

   Module &M = *F.getParent();
   std::string ir_file_path = "/WAVE/users2/unix/gpunjabi/ycho_lab/gpunjabi/autotuning/model/gnn/gnn_nb_threads/parallel.ll"
   writeModuleToFile(M, ir_file_path);
   llvm::errs() << "Function name: " << F.getName() << '\n';                   
   llvm::errs() << "Arg size: " << F.arg_size() << '\n';
   llvm::StringRef suffix("omp_outlined");
   if (endsWith(F.getName(), suffix)) {
     llvm::errs() << "Found out function outlined\n";
                                                                               
     // Insert code to print "Hello, world!"
     llvm::LLVMContext &context = F.getContext();
     llvm::IRBuilder<> builder(context);
                                                                               
     // Get a pointer to the printf function
     llvm::FunctionType *printfType = llvm::FunctionType::get(
         llvm::IntegerType::getInt32Ty(context),
         llvm::PointerType::get(llvm::Type::getInt8Ty(context), 0), true);
     llvm::FunctionCallee printfFunc =
         F.getParent()->getOrInsertFunction("printf", printfType);
                                                                               
     // Create a global string for "Hello, world!\n"
     llvm::Constant *helloWorldStr = llvm::ConstantDataArray::getString(
         context, "This message is from our custom pass :)\n", true);
     llvm::GlobalVariable *helloWorldVar = new llvm::GlobalVariable(
         *F.getParent(), helloWorldStr->getType(), true,
         llvm::GlobalValue::PrivateLinkage, helloWorldStr, ".str");
     llvm::Constant *zero =
         llvm::Constant::getNullValue(llvm::IntegerType::getInt32Ty(context));
     llvm::Constant *helloWorldStrPtr = llvm::ConstantExpr::getGetElementPtr(
         helloWorldStr->getType(), helloWorldVar, zero);
                                                                               
     // Insert the printf call at the beginning of the function
     for (auto &BB : F) {
       for (auto &I : BB) {
         builder.SetInsertPoint(&I);
         builder.CreateCall(printfFunc, {helloWorldStrPtr});
         break;
       }
       break;
     }
   }
    return llvm::PreservedAnalyses::all();
  }

  static bool isRequired() { return true; }
};

extern "C" LLVM_ATTRIBUTE_WEAK ::llvm::PassPluginLibraryInfo
llvmGetPassPluginInfo() {
    return {LLVM_PLUGIN_API_VERSION, "First", "0.1", [](llvm::PassBuilder &PB) {
        PB.registerPipelineParsingCallback(
            [](llvm::StringRef name, llvm::FunctionPassManager &FPM,
               llvm::ArrayRef<llvm::PassBuilder::PipelineElement>) -> bool {
                if (name == "autotune") {
                    FPM.addPass(OMPInterceptorPass{});
                    return true;
                }
                return false;
            });
    }};
}

